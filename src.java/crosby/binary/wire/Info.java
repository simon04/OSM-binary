// Code generated by Wire protocol buffer compiler, do not edit.
// Source: OSMPBF.Info in osmformat.proto
package crosby.binary.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Optional metadata that may be included into each primitive.
 */
public final class Info extends Message<Info, Info.Builder> {
  public static final ProtoAdapter<Info> ADAPTER = new ProtoAdapter_Info();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_VERSION = -1;

  public static final Long DEFAULT_TIMESTAMP = 0L;

  public static final Long DEFAULT_CHANGESET = 0L;

  public static final Integer DEFAULT_UID = 0;

  public static final Integer DEFAULT_USER_SID = 0;

  public static final Boolean DEFAULT_VISIBLE = false;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer version;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long timestamp;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long changeset;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer uid;

  /**
   * String IDs
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer user_sid;

  /**
   * The visible flag is used to store history information. It indicates that
   * the current object version has been created by a delete operation on the
   * OSM API.
   * When a writer sets this flag, it MUST add a required_features tag with
   * value "HistoricalInformation" to the HeaderBlock.
   * If this flag is not available for some object it MUST be assumed to be
   * true if the file has the required_features tag "HistoricalInformation"
   * set.
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean visible;

  public Info(Integer version, Long timestamp, Long changeset, Integer uid, Integer user_sid,
      Boolean visible) {
    this(version, timestamp, changeset, uid, user_sid, visible, ByteString.EMPTY);
  }

  public Info(Integer version, Long timestamp, Long changeset, Integer uid, Integer user_sid,
      Boolean visible, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.version = version;
    this.timestamp = timestamp;
    this.changeset = changeset;
    this.uid = uid;
    this.user_sid = user_sid;
    this.visible = visible;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.version = version;
    builder.timestamp = timestamp;
    builder.changeset = changeset;
    builder.uid = uid;
    builder.user_sid = user_sid;
    builder.visible = visible;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Info)) return false;
    Info o = (Info) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(version, o.version)
        && Internal.equals(timestamp, o.timestamp)
        && Internal.equals(changeset, o.changeset)
        && Internal.equals(uid, o.uid)
        && Internal.equals(user_sid, o.user_sid)
        && Internal.equals(visible, o.visible);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
      result = result * 37 + (changeset != null ? changeset.hashCode() : 0);
      result = result * 37 + (uid != null ? uid.hashCode() : 0);
      result = result * 37 + (user_sid != null ? user_sid.hashCode() : 0);
      result = result * 37 + (visible != null ? visible.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (version != null) builder.append(", version=").append(version);
    if (timestamp != null) builder.append(", timestamp=").append(timestamp);
    if (changeset != null) builder.append(", changeset=").append(changeset);
    if (uid != null) builder.append(", uid=").append(uid);
    if (user_sid != null) builder.append(", user_sid=").append(user_sid);
    if (visible != null) builder.append(", visible=").append(visible);
    return builder.replace(0, 2, "Info{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Info, Builder> {
    public Integer version;

    public Long timestamp;

    public Long changeset;

    public Integer uid;

    public Integer user_sid;

    public Boolean visible;

    public Builder() {
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder timestamp(Long timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public Builder changeset(Long changeset) {
      this.changeset = changeset;
      return this;
    }

    public Builder uid(Integer uid) {
      this.uid = uid;
      return this;
    }

    /**
     * String IDs
     */
    public Builder user_sid(Integer user_sid) {
      this.user_sid = user_sid;
      return this;
    }

    /**
     * The visible flag is used to store history information. It indicates that
     * the current object version has been created by a delete operation on the
     * OSM API.
     * When a writer sets this flag, it MUST add a required_features tag with
     * value "HistoricalInformation" to the HeaderBlock.
     * If this flag is not available for some object it MUST be assumed to be
     * true if the file has the required_features tag "HistoricalInformation"
     * set.
     */
    public Builder visible(Boolean visible) {
      this.visible = visible;
      return this;
    }

    @Override
    public Info build() {
      return new Info(version, timestamp, changeset, uid, user_sid, visible, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Info extends ProtoAdapter<Info> {
    public ProtoAdapter_Info() {
      super(FieldEncoding.LENGTH_DELIMITED, Info.class, "type.googleapis.com/OSMPBF.Info", Syntax.PROTO_2, null);
    }

    @Override
    public int encodedSize(Info value) {
      int result = 0;
      result += ProtoAdapter.INT32.encodedSizeWithTag(1, value.version);
      result += ProtoAdapter.INT64.encodedSizeWithTag(2, value.timestamp);
      result += ProtoAdapter.INT64.encodedSizeWithTag(3, value.changeset);
      result += ProtoAdapter.INT32.encodedSizeWithTag(4, value.uid);
      result += ProtoAdapter.UINT32.encodedSizeWithTag(5, value.user_sid);
      result += ProtoAdapter.BOOL.encodedSizeWithTag(6, value.visible);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, Info value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.version);
      ProtoAdapter.INT64.encodeWithTag(writer, 2, value.timestamp);
      ProtoAdapter.INT64.encodeWithTag(writer, 3, value.changeset);
      ProtoAdapter.INT32.encodeWithTag(writer, 4, value.uid);
      ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.user_sid);
      ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.visible);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Info decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.version(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.timestamp(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.changeset(ProtoAdapter.INT64.decode(reader)); break;
          case 4: builder.uid(ProtoAdapter.INT32.decode(reader)); break;
          case 5: builder.user_sid(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.visible(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public Info redact(Info value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
