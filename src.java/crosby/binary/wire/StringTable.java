// Code generated by Wire protocol buffer compiler, do not edit.
// Source: OSMPBF.StringTable in osmformat.proto
package crosby.binary.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * String table, contains the common strings in each block.
 *
 * Note that we reserve index '0' as a delimiter, so the entry at that
 * index in the table is ALWAYS blank and unused.
 */
public final class StringTable extends Message<StringTable, StringTable.Builder> {
  public static final ProtoAdapter<StringTable> ADAPTER = new ProtoAdapter_StringTable();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES",
      label = WireField.Label.REPEATED
  )
  public final List<ByteString> s;

  public StringTable(List<ByteString> s) {
    this(s, ByteString.EMPTY);
  }

  public StringTable(List<ByteString> s, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.s = Internal.immutableCopyOf("s", s);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.s = Internal.copyOf(s);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof StringTable)) return false;
    StringTable o = (StringTable) other;
    return unknownFields().equals(o.unknownFields())
        && s.equals(o.s);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + s.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!s.isEmpty()) builder.append(", s=").append(s);
    return builder.replace(0, 2, "StringTable{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<StringTable, Builder> {
    public List<ByteString> s;

    public Builder() {
      s = Internal.newMutableList();
    }

    public Builder s(List<ByteString> s) {
      Internal.checkElementsNotNull(s);
      this.s = s;
      return this;
    }

    @Override
    public StringTable build() {
      return new StringTable(s, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_StringTable extends ProtoAdapter<StringTable> {
    public ProtoAdapter_StringTable() {
      super(FieldEncoding.LENGTH_DELIMITED, StringTable.class, "type.googleapis.com/OSMPBF.StringTable", Syntax.PROTO_2, null);
    }

    @Override
    public int encodedSize(StringTable value) {
      int result = 0;
      result += ProtoAdapter.BYTES.asRepeated().encodedSizeWithTag(1, value.s);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, StringTable value) throws IOException {
      ProtoAdapter.BYTES.asRepeated().encodeWithTag(writer, 1, value.s);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public StringTable decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.s.add(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public StringTable redact(StringTable value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
