// Code generated by Wire protocol buffer compiler, do not edit.
// Source: OSMPBF.DenseNodes in osmformat.proto
package crosby.binary.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * Used to densly represent a sequence of nodes that do not have any tags.
 *
 * We represent these nodes columnwise as five columns: ID's, lats, and
 * lons, all delta coded. When metadata is not omitted,
 *
 * We encode keys & vals for all nodes as a single array of integers
 * containing key-stringid and val-stringid, using a stringid of 0 as a
 * delimiter between nodes.
 *
 * ( (<keyid> <valid>)* '0' )*
 */
public final class DenseNodes extends Message<DenseNodes, DenseNodes.Builder> {
  public static final ProtoAdapter<DenseNodes> ADAPTER = new ProtoAdapter_DenseNodes();

  private static final long serialVersionUID = 0L;

  /**
   * DELTA coded
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64",
      label = WireField.Label.PACKED
  )
  public final List<Long> id;

  @WireField(
      tag = 5,
      adapter = "crosby.binary.wire.DenseInfo#ADAPTER"
  )
  public final DenseInfo denseinfo;

  /**
   * DELTA coded
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64",
      label = WireField.Label.PACKED
  )
  public final List<Long> lat;

  /**
   * DELTA coded
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64",
      label = WireField.Label.PACKED
  )
  public final List<Long> lon;

  /**
   * Special packing of keys and vals into one array. May be empty if all nodes in this block are tagless.
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.PACKED
  )
  public final List<Integer> keys_vals;

  public DenseNodes(List<Long> id, DenseInfo denseinfo, List<Long> lat, List<Long> lon,
      List<Integer> keys_vals) {
    this(id, denseinfo, lat, lon, keys_vals, ByteString.EMPTY);
  }

  public DenseNodes(List<Long> id, DenseInfo denseinfo, List<Long> lat, List<Long> lon,
      List<Integer> keys_vals, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = Internal.immutableCopyOf("id", id);
    this.denseinfo = denseinfo;
    this.lat = Internal.immutableCopyOf("lat", lat);
    this.lon = Internal.immutableCopyOf("lon", lon);
    this.keys_vals = Internal.immutableCopyOf("keys_vals", keys_vals);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = Internal.copyOf(id);
    builder.denseinfo = denseinfo;
    builder.lat = Internal.copyOf(lat);
    builder.lon = Internal.copyOf(lon);
    builder.keys_vals = Internal.copyOf(keys_vals);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DenseNodes)) return false;
    DenseNodes o = (DenseNodes) other;
    return unknownFields().equals(o.unknownFields())
        && id.equals(o.id)
        && Internal.equals(denseinfo, o.denseinfo)
        && lat.equals(o.lat)
        && lon.equals(o.lon)
        && keys_vals.equals(o.keys_vals);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + id.hashCode();
      result = result * 37 + (denseinfo != null ? denseinfo.hashCode() : 0);
      result = result * 37 + lat.hashCode();
      result = result * 37 + lon.hashCode();
      result = result * 37 + keys_vals.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!id.isEmpty()) builder.append(", id=").append(id);
    if (denseinfo != null) builder.append(", denseinfo=").append(denseinfo);
    if (!lat.isEmpty()) builder.append(", lat=").append(lat);
    if (!lon.isEmpty()) builder.append(", lon=").append(lon);
    if (!keys_vals.isEmpty()) builder.append(", keys_vals=").append(keys_vals);
    return builder.replace(0, 2, "DenseNodes{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<DenseNodes, Builder> {
    public List<Long> id;

    public DenseInfo denseinfo;

    public List<Long> lat;

    public List<Long> lon;

    public List<Integer> keys_vals;

    public Builder() {
      id = Internal.newMutableList();
      lat = Internal.newMutableList();
      lon = Internal.newMutableList();
      keys_vals = Internal.newMutableList();
    }

    /**
     * DELTA coded
     */
    public Builder id(List<Long> id) {
      Internal.checkElementsNotNull(id);
      this.id = id;
      return this;
    }

    public Builder denseinfo(DenseInfo denseinfo) {
      this.denseinfo = denseinfo;
      return this;
    }

    /**
     * DELTA coded
     */
    public Builder lat(List<Long> lat) {
      Internal.checkElementsNotNull(lat);
      this.lat = lat;
      return this;
    }

    /**
     * DELTA coded
     */
    public Builder lon(List<Long> lon) {
      Internal.checkElementsNotNull(lon);
      this.lon = lon;
      return this;
    }

    /**
     * Special packing of keys and vals into one array. May be empty if all nodes in this block are tagless.
     */
    public Builder keys_vals(List<Integer> keys_vals) {
      Internal.checkElementsNotNull(keys_vals);
      this.keys_vals = keys_vals;
      return this;
    }

    @Override
    public DenseNodes build() {
      return new DenseNodes(id, denseinfo, lat, lon, keys_vals, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DenseNodes extends ProtoAdapter<DenseNodes> {
    public ProtoAdapter_DenseNodes() {
      super(FieldEncoding.LENGTH_DELIMITED, DenseNodes.class, "type.googleapis.com/OSMPBF.DenseNodes", Syntax.PROTO_2, null);
    }

    @Override
    public int encodedSize(DenseNodes value) {
      int result = 0;
      result += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(1, value.id);
      result += DenseInfo.ADAPTER.encodedSizeWithTag(5, value.denseinfo);
      result += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(8, value.lat);
      result += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(9, value.lon);
      result += ProtoAdapter.INT32.asPacked().encodedSizeWithTag(10, value.keys_vals);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, DenseNodes value) throws IOException {
      ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 1, value.id);
      DenseInfo.ADAPTER.encodeWithTag(writer, 5, value.denseinfo);
      ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 8, value.lat);
      ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 9, value.lon);
      ProtoAdapter.INT32.asPacked().encodeWithTag(writer, 10, value.keys_vals);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DenseNodes decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id.add(ProtoAdapter.SINT64.decode(reader)); break;
          case 5: builder.denseinfo(DenseInfo.ADAPTER.decode(reader)); break;
          case 8: builder.lat.add(ProtoAdapter.SINT64.decode(reader)); break;
          case 9: builder.lon.add(ProtoAdapter.SINT64.decode(reader)); break;
          case 10: builder.keys_vals.add(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public DenseNodes redact(DenseNodes value) {
      Builder builder = value.newBuilder();
      if (builder.denseinfo != null) builder.denseinfo = DenseInfo.ADAPTER.redact(builder.denseinfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
