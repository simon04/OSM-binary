// Code generated by Wire protocol buffer compiler, do not edit.
// Source: OSMPBF.PrimitiveGroup in osmformat.proto
package crosby.binary.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * Group of OSMPrimitives. All primitives in a group must be the same type.
 */
public final class PrimitiveGroup extends Message<PrimitiveGroup, PrimitiveGroup.Builder> {
  public static final ProtoAdapter<PrimitiveGroup> ADAPTER = new ProtoAdapter_PrimitiveGroup();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "crosby.binary.wire.Node#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Node> nodes;

  @WireField(
      tag = 2,
      adapter = "crosby.binary.wire.DenseNodes#ADAPTER"
  )
  public final DenseNodes dense;

  @WireField(
      tag = 3,
      adapter = "crosby.binary.wire.Way#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Way> ways;

  @WireField(
      tag = 4,
      adapter = "crosby.binary.wire.Relation#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Relation> relations;

  @WireField(
      tag = 5,
      adapter = "crosby.binary.wire.ChangeSet#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ChangeSet> changesets;

  public PrimitiveGroup(List<Node> nodes, DenseNodes dense, List<Way> ways,
      List<Relation> relations, List<ChangeSet> changesets) {
    this(nodes, dense, ways, relations, changesets, ByteString.EMPTY);
  }

  public PrimitiveGroup(List<Node> nodes, DenseNodes dense, List<Way> ways,
      List<Relation> relations, List<ChangeSet> changesets, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.nodes = Internal.immutableCopyOf("nodes", nodes);
    this.dense = dense;
    this.ways = Internal.immutableCopyOf("ways", ways);
    this.relations = Internal.immutableCopyOf("relations", relations);
    this.changesets = Internal.immutableCopyOf("changesets", changesets);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.nodes = Internal.copyOf(nodes);
    builder.dense = dense;
    builder.ways = Internal.copyOf(ways);
    builder.relations = Internal.copyOf(relations);
    builder.changesets = Internal.copyOf(changesets);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PrimitiveGroup)) return false;
    PrimitiveGroup o = (PrimitiveGroup) other;
    return unknownFields().equals(o.unknownFields())
        && nodes.equals(o.nodes)
        && Internal.equals(dense, o.dense)
        && ways.equals(o.ways)
        && relations.equals(o.relations)
        && changesets.equals(o.changesets);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + nodes.hashCode();
      result = result * 37 + (dense != null ? dense.hashCode() : 0);
      result = result * 37 + ways.hashCode();
      result = result * 37 + relations.hashCode();
      result = result * 37 + changesets.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!nodes.isEmpty()) builder.append(", nodes=").append(nodes);
    if (dense != null) builder.append(", dense=").append(dense);
    if (!ways.isEmpty()) builder.append(", ways=").append(ways);
    if (!relations.isEmpty()) builder.append(", relations=").append(relations);
    if (!changesets.isEmpty()) builder.append(", changesets=").append(changesets);
    return builder.replace(0, 2, "PrimitiveGroup{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PrimitiveGroup, Builder> {
    public List<Node> nodes;

    public DenseNodes dense;

    public List<Way> ways;

    public List<Relation> relations;

    public List<ChangeSet> changesets;

    public Builder() {
      nodes = Internal.newMutableList();
      ways = Internal.newMutableList();
      relations = Internal.newMutableList();
      changesets = Internal.newMutableList();
    }

    public Builder nodes(List<Node> nodes) {
      Internal.checkElementsNotNull(nodes);
      this.nodes = nodes;
      return this;
    }

    public Builder dense(DenseNodes dense) {
      this.dense = dense;
      return this;
    }

    public Builder ways(List<Way> ways) {
      Internal.checkElementsNotNull(ways);
      this.ways = ways;
      return this;
    }

    public Builder relations(List<Relation> relations) {
      Internal.checkElementsNotNull(relations);
      this.relations = relations;
      return this;
    }

    public Builder changesets(List<ChangeSet> changesets) {
      Internal.checkElementsNotNull(changesets);
      this.changesets = changesets;
      return this;
    }

    @Override
    public PrimitiveGroup build() {
      return new PrimitiveGroup(nodes, dense, ways, relations, changesets, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PrimitiveGroup extends ProtoAdapter<PrimitiveGroup> {
    public ProtoAdapter_PrimitiveGroup() {
      super(FieldEncoding.LENGTH_DELIMITED, PrimitiveGroup.class, "type.googleapis.com/OSMPBF.PrimitiveGroup", Syntax.PROTO_2, null);
    }

    @Override
    public int encodedSize(PrimitiveGroup value) {
      int result = 0;
      result += Node.ADAPTER.asRepeated().encodedSizeWithTag(1, value.nodes);
      result += DenseNodes.ADAPTER.encodedSizeWithTag(2, value.dense);
      result += Way.ADAPTER.asRepeated().encodedSizeWithTag(3, value.ways);
      result += Relation.ADAPTER.asRepeated().encodedSizeWithTag(4, value.relations);
      result += ChangeSet.ADAPTER.asRepeated().encodedSizeWithTag(5, value.changesets);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, PrimitiveGroup value) throws IOException {
      Node.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.nodes);
      DenseNodes.ADAPTER.encodeWithTag(writer, 2, value.dense);
      Way.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.ways);
      Relation.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.relations);
      ChangeSet.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.changesets);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PrimitiveGroup decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.nodes.add(Node.ADAPTER.decode(reader)); break;
          case 2: builder.dense(DenseNodes.ADAPTER.decode(reader)); break;
          case 3: builder.ways.add(Way.ADAPTER.decode(reader)); break;
          case 4: builder.relations.add(Relation.ADAPTER.decode(reader)); break;
          case 5: builder.changesets.add(ChangeSet.ADAPTER.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public PrimitiveGroup redact(PrimitiveGroup value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.nodes, Node.ADAPTER);
      if (builder.dense != null) builder.dense = DenseNodes.ADAPTER.redact(builder.dense);
      Internal.redactElements(builder.ways, Way.ADAPTER);
      Internal.redactElements(builder.relations, Relation.ADAPTER);
      Internal.redactElements(builder.changesets, ChangeSet.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
