// Code generated by Wire protocol buffer compiler, do not edit.
// Source: OSMPBF.DenseInfo in osmformat.proto
package crosby.binary.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * Optional metadata that may be included into each primitive. Special dense format used in DenseNodes.
 */
public final class DenseInfo extends Message<DenseInfo, DenseInfo.Builder> {
  public static final ProtoAdapter<DenseInfo> ADAPTER = new ProtoAdapter_DenseInfo();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.PACKED
  )
  public final List<Integer> version;

  /**
   * DELTA coded
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64",
      label = WireField.Label.PACKED
  )
  public final List<Long> timestamp;

  /**
   * DELTA coded
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64",
      label = WireField.Label.PACKED
  )
  public final List<Long> changeset;

  /**
   * DELTA coded
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#SINT32",
      label = WireField.Label.PACKED
  )
  public final List<Integer> uid;

  /**
   * String IDs for usernames. DELTA coded
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#SINT32",
      label = WireField.Label.PACKED
  )
  public final List<Integer> user_sid;

  /**
   * The visible flag is used to store history information. It indicates that
   * the current object version has been created by a delete operation on the
   * OSM API.
   * When a writer sets this flag, it MUST add a required_features tag with
   * value "HistoricalInformation" to the HeaderBlock.
   * If this flag is not available for some object it MUST be assumed to be
   * true if the file has the required_features tag "HistoricalInformation"
   * set.
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL",
      label = WireField.Label.PACKED
  )
  public final List<Boolean> visible;

  public DenseInfo(List<Integer> version, List<Long> timestamp, List<Long> changeset,
      List<Integer> uid, List<Integer> user_sid, List<Boolean> visible) {
    this(version, timestamp, changeset, uid, user_sid, visible, ByteString.EMPTY);
  }

  public DenseInfo(List<Integer> version, List<Long> timestamp, List<Long> changeset,
      List<Integer> uid, List<Integer> user_sid, List<Boolean> visible, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.version = Internal.immutableCopyOf("version", version);
    this.timestamp = Internal.immutableCopyOf("timestamp", timestamp);
    this.changeset = Internal.immutableCopyOf("changeset", changeset);
    this.uid = Internal.immutableCopyOf("uid", uid);
    this.user_sid = Internal.immutableCopyOf("user_sid", user_sid);
    this.visible = Internal.immutableCopyOf("visible", visible);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.version = Internal.copyOf(version);
    builder.timestamp = Internal.copyOf(timestamp);
    builder.changeset = Internal.copyOf(changeset);
    builder.uid = Internal.copyOf(uid);
    builder.user_sid = Internal.copyOf(user_sid);
    builder.visible = Internal.copyOf(visible);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DenseInfo)) return false;
    DenseInfo o = (DenseInfo) other;
    return unknownFields().equals(o.unknownFields())
        && version.equals(o.version)
        && timestamp.equals(o.timestamp)
        && changeset.equals(o.changeset)
        && uid.equals(o.uid)
        && user_sid.equals(o.user_sid)
        && visible.equals(o.visible);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + version.hashCode();
      result = result * 37 + timestamp.hashCode();
      result = result * 37 + changeset.hashCode();
      result = result * 37 + uid.hashCode();
      result = result * 37 + user_sid.hashCode();
      result = result * 37 + visible.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!version.isEmpty()) builder.append(", version=").append(version);
    if (!timestamp.isEmpty()) builder.append(", timestamp=").append(timestamp);
    if (!changeset.isEmpty()) builder.append(", changeset=").append(changeset);
    if (!uid.isEmpty()) builder.append(", uid=").append(uid);
    if (!user_sid.isEmpty()) builder.append(", user_sid=").append(user_sid);
    if (!visible.isEmpty()) builder.append(", visible=").append(visible);
    return builder.replace(0, 2, "DenseInfo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<DenseInfo, Builder> {
    public List<Integer> version;

    public List<Long> timestamp;

    public List<Long> changeset;

    public List<Integer> uid;

    public List<Integer> user_sid;

    public List<Boolean> visible;

    public Builder() {
      version = Internal.newMutableList();
      timestamp = Internal.newMutableList();
      changeset = Internal.newMutableList();
      uid = Internal.newMutableList();
      user_sid = Internal.newMutableList();
      visible = Internal.newMutableList();
    }

    public Builder version(List<Integer> version) {
      Internal.checkElementsNotNull(version);
      this.version = version;
      return this;
    }

    /**
     * DELTA coded
     */
    public Builder timestamp(List<Long> timestamp) {
      Internal.checkElementsNotNull(timestamp);
      this.timestamp = timestamp;
      return this;
    }

    /**
     * DELTA coded
     */
    public Builder changeset(List<Long> changeset) {
      Internal.checkElementsNotNull(changeset);
      this.changeset = changeset;
      return this;
    }

    /**
     * DELTA coded
     */
    public Builder uid(List<Integer> uid) {
      Internal.checkElementsNotNull(uid);
      this.uid = uid;
      return this;
    }

    /**
     * String IDs for usernames. DELTA coded
     */
    public Builder user_sid(List<Integer> user_sid) {
      Internal.checkElementsNotNull(user_sid);
      this.user_sid = user_sid;
      return this;
    }

    /**
     * The visible flag is used to store history information. It indicates that
     * the current object version has been created by a delete operation on the
     * OSM API.
     * When a writer sets this flag, it MUST add a required_features tag with
     * value "HistoricalInformation" to the HeaderBlock.
     * If this flag is not available for some object it MUST be assumed to be
     * true if the file has the required_features tag "HistoricalInformation"
     * set.
     */
    public Builder visible(List<Boolean> visible) {
      Internal.checkElementsNotNull(visible);
      this.visible = visible;
      return this;
    }

    @Override
    public DenseInfo build() {
      return new DenseInfo(version, timestamp, changeset, uid, user_sid, visible, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DenseInfo extends ProtoAdapter<DenseInfo> {
    public ProtoAdapter_DenseInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, DenseInfo.class, "type.googleapis.com/OSMPBF.DenseInfo", Syntax.PROTO_2, null);
    }

    @Override
    public int encodedSize(DenseInfo value) {
      int result = 0;
      result += ProtoAdapter.INT32.asPacked().encodedSizeWithTag(1, value.version);
      result += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(2, value.timestamp);
      result += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(3, value.changeset);
      result += ProtoAdapter.SINT32.asPacked().encodedSizeWithTag(4, value.uid);
      result += ProtoAdapter.SINT32.asPacked().encodedSizeWithTag(5, value.user_sid);
      result += ProtoAdapter.BOOL.asPacked().encodedSizeWithTag(6, value.visible);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, DenseInfo value) throws IOException {
      ProtoAdapter.INT32.asPacked().encodeWithTag(writer, 1, value.version);
      ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 2, value.timestamp);
      ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 3, value.changeset);
      ProtoAdapter.SINT32.asPacked().encodeWithTag(writer, 4, value.uid);
      ProtoAdapter.SINT32.asPacked().encodeWithTag(writer, 5, value.user_sid);
      ProtoAdapter.BOOL.asPacked().encodeWithTag(writer, 6, value.visible);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DenseInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.version.add(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.timestamp.add(ProtoAdapter.SINT64.decode(reader)); break;
          case 3: builder.changeset.add(ProtoAdapter.SINT64.decode(reader)); break;
          case 4: builder.uid.add(ProtoAdapter.SINT32.decode(reader)); break;
          case 5: builder.user_sid.add(ProtoAdapter.SINT32.decode(reader)); break;
          case 6: builder.visible.add(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public DenseInfo redact(DenseInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
