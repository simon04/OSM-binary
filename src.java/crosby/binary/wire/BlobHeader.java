// Code generated by Wire protocol buffer compiler, do not edit.
// Source: OSMPBF.BlobHeader in fileformat.proto
package crosby.binary.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * A file contains an sequence of fileblock headers, each prefixed by
 * their length in network byte order, followed by a data block
 * containing the actual data. Types starting with a "_" are reserved.
 */
public final class BlobHeader extends Message<BlobHeader, BlobHeader.Builder> {
  public static final ProtoAdapter<BlobHeader> ADAPTER = new ProtoAdapter_BlobHeader();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_TYPE = "";

  public static final ByteString DEFAULT_INDEXDATA = ByteString.EMPTY;

  public static final Integer DEFAULT_DATASIZE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String type;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString indexdata;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer datasize;

  public BlobHeader(String type, ByteString indexdata, Integer datasize) {
    this(type, indexdata, datasize, ByteString.EMPTY);
  }

  public BlobHeader(String type, ByteString indexdata, Integer datasize, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.indexdata = indexdata;
    this.datasize = datasize;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.indexdata = indexdata;
    builder.datasize = datasize;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BlobHeader)) return false;
    BlobHeader o = (BlobHeader) other;
    return unknownFields().equals(o.unknownFields())
        && type.equals(o.type)
        && Internal.equals(indexdata, o.indexdata)
        && datasize.equals(o.datasize);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + type.hashCode();
      result = result * 37 + (indexdata != null ? indexdata.hashCode() : 0);
      result = result * 37 + datasize.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", type=").append(Internal.sanitize(type));
    if (indexdata != null) builder.append(", indexdata=").append(indexdata);
    builder.append(", datasize=").append(datasize);
    return builder.replace(0, 2, "BlobHeader{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<BlobHeader, Builder> {
    public String type;

    public ByteString indexdata;

    public Integer datasize;

    public Builder() {
    }

    public Builder type(String type) {
      this.type = type;
      return this;
    }

    public Builder indexdata(ByteString indexdata) {
      this.indexdata = indexdata;
      return this;
    }

    public Builder datasize(Integer datasize) {
      this.datasize = datasize;
      return this;
    }

    @Override
    public BlobHeader build() {
      if (type == null
          || datasize == null) {
        throw Internal.missingRequiredFields(type, "type",
            datasize, "datasize");
      }
      return new BlobHeader(type, indexdata, datasize, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BlobHeader extends ProtoAdapter<BlobHeader> {
    public ProtoAdapter_BlobHeader() {
      super(FieldEncoding.LENGTH_DELIMITED, BlobHeader.class, "type.googleapis.com/OSMPBF.BlobHeader", Syntax.PROTO_2, null);
    }

    @Override
    public int encodedSize(BlobHeader value) {
      int result = 0;
      result += ProtoAdapter.STRING.encodedSizeWithTag(1, value.type);
      result += ProtoAdapter.BYTES.encodedSizeWithTag(2, value.indexdata);
      result += ProtoAdapter.INT32.encodedSizeWithTag(3, value.datasize);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, BlobHeader value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.indexdata);
      ProtoAdapter.INT32.encodeWithTag(writer, 3, value.datasize);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BlobHeader decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.type(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.indexdata(ProtoAdapter.BYTES.decode(reader)); break;
          case 3: builder.datasize(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public BlobHeader redact(BlobHeader value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
