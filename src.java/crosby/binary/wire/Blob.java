// Code generated by Wire protocol buffer compiler, do not edit.
// Source: OSMPBF.Blob in fileformat.proto
package crosby.binary.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Deprecated;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * protoc --java_out=../.. fileformat.proto
 *
 *  STORAGE LAYER: Storing primitives.
 */
public final class Blob extends Message<Blob, Blob.Builder> {
  public static final ProtoAdapter<Blob> ADAPTER = new ProtoAdapter_Blob();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RAW_SIZE = 0;

  public static final ByteString DEFAULT_RAW = ByteString.EMPTY;

  public static final ByteString DEFAULT_ZLIB_DATA = ByteString.EMPTY;

  public static final ByteString DEFAULT_LZMA_DATA = ByteString.EMPTY;

  public static final ByteString DEFAULT_OBSOLETE_BZIP2_DATA = ByteString.EMPTY;

  public static final ByteString DEFAULT_LZ4_DATA = ByteString.EMPTY;

  public static final ByteString DEFAULT_ZSTD_DATA = ByteString.EMPTY;

  /**
   * When compressed, the uncompressed size
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer raw_size;

  /**
   * No compression
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString raw;

  /**
   * Possible compressed versions of the data.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString zlib_data;

  /**
   * For LZMA compressed data (optional)
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString lzma_data;

  /**
   * Formerly used for bzip2 compressed data. Deprecated in 2010.
   * Don't reuse this tag number.
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  @Deprecated
  public final ByteString OBSOLETE_bzip2_data;

  /**
   * For LZ4 compressed data (optional)
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString lz4_data;

  /**
   * For ZSTD compressed data (optional)
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString zstd_data;

  public Blob(Integer raw_size, ByteString raw, ByteString zlib_data, ByteString lzma_data,
      ByteString OBSOLETE_bzip2_data, ByteString lz4_data, ByteString zstd_data) {
    this(raw_size, raw, zlib_data, lzma_data, OBSOLETE_bzip2_data, lz4_data, zstd_data, ByteString.EMPTY);
  }

  public Blob(Integer raw_size, ByteString raw, ByteString zlib_data, ByteString lzma_data,
      ByteString OBSOLETE_bzip2_data, ByteString lz4_data, ByteString zstd_data,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    if (Internal.countNonNull(raw, zlib_data, lzma_data, OBSOLETE_bzip2_data, lz4_data, zstd_data) > 1) {
      throw new IllegalArgumentException("at most one of raw, zlib_data, lzma_data, OBSOLETE_bzip2_data, lz4_data, zstd_data may be non-null");
    }
    this.raw_size = raw_size;
    this.raw = raw;
    this.zlib_data = zlib_data;
    this.lzma_data = lzma_data;
    this.OBSOLETE_bzip2_data = OBSOLETE_bzip2_data;
    this.lz4_data = lz4_data;
    this.zstd_data = zstd_data;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.raw_size = raw_size;
    builder.raw = raw;
    builder.zlib_data = zlib_data;
    builder.lzma_data = lzma_data;
    builder.OBSOLETE_bzip2_data = OBSOLETE_bzip2_data;
    builder.lz4_data = lz4_data;
    builder.zstd_data = zstd_data;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Blob)) return false;
    Blob o = (Blob) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(raw_size, o.raw_size)
        && Internal.equals(raw, o.raw)
        && Internal.equals(zlib_data, o.zlib_data)
        && Internal.equals(lzma_data, o.lzma_data)
        && Internal.equals(OBSOLETE_bzip2_data, o.OBSOLETE_bzip2_data)
        && Internal.equals(lz4_data, o.lz4_data)
        && Internal.equals(zstd_data, o.zstd_data);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (raw_size != null ? raw_size.hashCode() : 0);
      result = result * 37 + (raw != null ? raw.hashCode() : 0);
      result = result * 37 + (zlib_data != null ? zlib_data.hashCode() : 0);
      result = result * 37 + (lzma_data != null ? lzma_data.hashCode() : 0);
      result = result * 37 + (OBSOLETE_bzip2_data != null ? OBSOLETE_bzip2_data.hashCode() : 0);
      result = result * 37 + (lz4_data != null ? lz4_data.hashCode() : 0);
      result = result * 37 + (zstd_data != null ? zstd_data.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (raw_size != null) builder.append(", raw_size=").append(raw_size);
    if (raw != null) builder.append(", raw=").append(raw);
    if (zlib_data != null) builder.append(", zlib_data=").append(zlib_data);
    if (lzma_data != null) builder.append(", lzma_data=").append(lzma_data);
    if (OBSOLETE_bzip2_data != null) builder.append(", OBSOLETE_bzip2_data=").append(OBSOLETE_bzip2_data);
    if (lz4_data != null) builder.append(", lz4_data=").append(lz4_data);
    if (zstd_data != null) builder.append(", zstd_data=").append(zstd_data);
    return builder.replace(0, 2, "Blob{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Blob, Builder> {
    public Integer raw_size;

    public ByteString raw;

    public ByteString zlib_data;

    public ByteString lzma_data;

    public ByteString OBSOLETE_bzip2_data;

    public ByteString lz4_data;

    public ByteString zstd_data;

    public Builder() {
    }

    /**
     * When compressed, the uncompressed size
     */
    public Builder raw_size(Integer raw_size) {
      this.raw_size = raw_size;
      return this;
    }

    /**
     * No compression
     */
    public Builder raw(ByteString raw) {
      this.raw = raw;
      this.zlib_data = null;
      this.lzma_data = null;
      this.OBSOLETE_bzip2_data = null;
      this.lz4_data = null;
      this.zstd_data = null;
      return this;
    }

    /**
     * Possible compressed versions of the data.
     */
    public Builder zlib_data(ByteString zlib_data) {
      this.zlib_data = zlib_data;
      this.raw = null;
      this.lzma_data = null;
      this.OBSOLETE_bzip2_data = null;
      this.lz4_data = null;
      this.zstd_data = null;
      return this;
    }

    /**
     * For LZMA compressed data (optional)
     */
    public Builder lzma_data(ByteString lzma_data) {
      this.lzma_data = lzma_data;
      this.raw = null;
      this.zlib_data = null;
      this.OBSOLETE_bzip2_data = null;
      this.lz4_data = null;
      this.zstd_data = null;
      return this;
    }

    /**
     * Formerly used for bzip2 compressed data. Deprecated in 2010.
     * Don't reuse this tag number.
     */
    @Deprecated
    public Builder OBSOLETE_bzip2_data(ByteString OBSOLETE_bzip2_data) {
      this.OBSOLETE_bzip2_data = OBSOLETE_bzip2_data;
      this.raw = null;
      this.zlib_data = null;
      this.lzma_data = null;
      this.lz4_data = null;
      this.zstd_data = null;
      return this;
    }

    /**
     * For LZ4 compressed data (optional)
     */
    public Builder lz4_data(ByteString lz4_data) {
      this.lz4_data = lz4_data;
      this.raw = null;
      this.zlib_data = null;
      this.lzma_data = null;
      this.OBSOLETE_bzip2_data = null;
      this.zstd_data = null;
      return this;
    }

    /**
     * For ZSTD compressed data (optional)
     */
    public Builder zstd_data(ByteString zstd_data) {
      this.zstd_data = zstd_data;
      this.raw = null;
      this.zlib_data = null;
      this.lzma_data = null;
      this.OBSOLETE_bzip2_data = null;
      this.lz4_data = null;
      return this;
    }

    @Override
    public Blob build() {
      return new Blob(raw_size, raw, zlib_data, lzma_data, OBSOLETE_bzip2_data, lz4_data, zstd_data, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Blob extends ProtoAdapter<Blob> {
    public ProtoAdapter_Blob() {
      super(FieldEncoding.LENGTH_DELIMITED, Blob.class, "type.googleapis.com/OSMPBF.Blob", Syntax.PROTO_2, null);
    }

    @Override
    public int encodedSize(Blob value) {
      int result = 0;
      result += ProtoAdapter.INT32.encodedSizeWithTag(2, value.raw_size);
      result += ProtoAdapter.BYTES.encodedSizeWithTag(1, value.raw);
      result += ProtoAdapter.BYTES.encodedSizeWithTag(3, value.zlib_data);
      result += ProtoAdapter.BYTES.encodedSizeWithTag(4, value.lzma_data);
      result += ProtoAdapter.BYTES.encodedSizeWithTag(5, value.OBSOLETE_bzip2_data);
      result += ProtoAdapter.BYTES.encodedSizeWithTag(6, value.lz4_data);
      result += ProtoAdapter.BYTES.encodedSizeWithTag(7, value.zstd_data);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, Blob value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 2, value.raw_size);
      ProtoAdapter.BYTES.encodeWithTag(writer, 1, value.raw);
      ProtoAdapter.BYTES.encodeWithTag(writer, 3, value.zlib_data);
      ProtoAdapter.BYTES.encodeWithTag(writer, 4, value.lzma_data);
      ProtoAdapter.BYTES.encodeWithTag(writer, 5, value.OBSOLETE_bzip2_data);
      ProtoAdapter.BYTES.encodeWithTag(writer, 6, value.lz4_data);
      ProtoAdapter.BYTES.encodeWithTag(writer, 7, value.zstd_data);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Blob decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.raw(ProtoAdapter.BYTES.decode(reader)); break;
          case 2: builder.raw_size(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.zlib_data(ProtoAdapter.BYTES.decode(reader)); break;
          case 4: builder.lzma_data(ProtoAdapter.BYTES.decode(reader)); break;
          case 5: builder.OBSOLETE_bzip2_data(ProtoAdapter.BYTES.decode(reader)); break;
          case 6: builder.lz4_data(ProtoAdapter.BYTES.decode(reader)); break;
          case 7: builder.zstd_data(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public Blob redact(Blob value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
