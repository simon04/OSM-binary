// Code generated by Wire protocol buffer compiler, do not edit.
// Source: OSMPBF.Way in osmformat.proto
package crosby.binary.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class Way extends Message<Way, Way.Builder> {
  public static final ProtoAdapter<Way> ADAPTER = new ProtoAdapter_Way();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.REQUIRED
  )
  public final Long id;

  /**
   * Parallel arrays.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.PACKED
  )
  public final List<Integer> keys;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.PACKED
  )
  public final List<Integer> vals;

  @WireField(
      tag = 4,
      adapter = "crosby.binary.wire.Info#ADAPTER"
  )
  public final Info info;

  /**
   * DELTA coded
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64",
      label = WireField.Label.PACKED
  )
  public final List<Long> refs;

  /**
   * The following two fields are optional. They are only used in a special
   * format where node locations are also added to the ways. This makes the
   * files larger, but allows creating way geometries directly.
   *
   * If this is used, you MUST set the optional_features tag "LocationsOnWays"
   * and the number of values in refs, lat, and lon MUST be the same.
   * DELTA coded, optional
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64",
      label = WireField.Label.PACKED
  )
  public final List<Long> lat;

  /**
   * DELTA coded, optional
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64",
      label = WireField.Label.PACKED
  )
  public final List<Long> lon;

  public Way(Long id, List<Integer> keys, List<Integer> vals, Info info, List<Long> refs,
      List<Long> lat, List<Long> lon) {
    this(id, keys, vals, info, refs, lat, lon, ByteString.EMPTY);
  }

  public Way(Long id, List<Integer> keys, List<Integer> vals, Info info, List<Long> refs,
      List<Long> lat, List<Long> lon, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.keys = Internal.immutableCopyOf("keys", keys);
    this.vals = Internal.immutableCopyOf("vals", vals);
    this.info = info;
    this.refs = Internal.immutableCopyOf("refs", refs);
    this.lat = Internal.immutableCopyOf("lat", lat);
    this.lon = Internal.immutableCopyOf("lon", lon);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.keys = Internal.copyOf(keys);
    builder.vals = Internal.copyOf(vals);
    builder.info = info;
    builder.refs = Internal.copyOf(refs);
    builder.lat = Internal.copyOf(lat);
    builder.lon = Internal.copyOf(lon);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Way)) return false;
    Way o = (Way) other;
    return unknownFields().equals(o.unknownFields())
        && id.equals(o.id)
        && keys.equals(o.keys)
        && vals.equals(o.vals)
        && Internal.equals(info, o.info)
        && refs.equals(o.refs)
        && lat.equals(o.lat)
        && lon.equals(o.lon);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + id.hashCode();
      result = result * 37 + keys.hashCode();
      result = result * 37 + vals.hashCode();
      result = result * 37 + (info != null ? info.hashCode() : 0);
      result = result * 37 + refs.hashCode();
      result = result * 37 + lat.hashCode();
      result = result * 37 + lon.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", id=").append(id);
    if (!keys.isEmpty()) builder.append(", keys=").append(keys);
    if (!vals.isEmpty()) builder.append(", vals=").append(vals);
    if (info != null) builder.append(", info=").append(info);
    if (!refs.isEmpty()) builder.append(", refs=").append(refs);
    if (!lat.isEmpty()) builder.append(", lat=").append(lat);
    if (!lon.isEmpty()) builder.append(", lon=").append(lon);
    return builder.replace(0, 2, "Way{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Way, Builder> {
    public Long id;

    public List<Integer> keys;

    public List<Integer> vals;

    public Info info;

    public List<Long> refs;

    public List<Long> lat;

    public List<Long> lon;

    public Builder() {
      keys = Internal.newMutableList();
      vals = Internal.newMutableList();
      refs = Internal.newMutableList();
      lat = Internal.newMutableList();
      lon = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * Parallel arrays.
     */
    public Builder keys(List<Integer> keys) {
      Internal.checkElementsNotNull(keys);
      this.keys = keys;
      return this;
    }

    public Builder vals(List<Integer> vals) {
      Internal.checkElementsNotNull(vals);
      this.vals = vals;
      return this;
    }

    public Builder info(Info info) {
      this.info = info;
      return this;
    }

    /**
     * DELTA coded
     */
    public Builder refs(List<Long> refs) {
      Internal.checkElementsNotNull(refs);
      this.refs = refs;
      return this;
    }

    /**
     * The following two fields are optional. They are only used in a special
     * format where node locations are also added to the ways. This makes the
     * files larger, but allows creating way geometries directly.
     *
     * If this is used, you MUST set the optional_features tag "LocationsOnWays"
     * and the number of values in refs, lat, and lon MUST be the same.
     * DELTA coded, optional
     */
    public Builder lat(List<Long> lat) {
      Internal.checkElementsNotNull(lat);
      this.lat = lat;
      return this;
    }

    /**
     * DELTA coded, optional
     */
    public Builder lon(List<Long> lon) {
      Internal.checkElementsNotNull(lon);
      this.lon = lon;
      return this;
    }

    @Override
    public Way build() {
      if (id == null) {
        throw Internal.missingRequiredFields(id, "id");
      }
      return new Way(id, keys, vals, info, refs, lat, lon, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Way extends ProtoAdapter<Way> {
    public ProtoAdapter_Way() {
      super(FieldEncoding.LENGTH_DELIMITED, Way.class, "type.googleapis.com/OSMPBF.Way", Syntax.PROTO_2, null);
    }

    @Override
    public int encodedSize(Way value) {
      int result = 0;
      result += ProtoAdapter.INT64.encodedSizeWithTag(1, value.id);
      result += ProtoAdapter.UINT32.asPacked().encodedSizeWithTag(2, value.keys);
      result += ProtoAdapter.UINT32.asPacked().encodedSizeWithTag(3, value.vals);
      result += Info.ADAPTER.encodedSizeWithTag(4, value.info);
      result += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(8, value.refs);
      result += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(9, value.lat);
      result += ProtoAdapter.SINT64.asPacked().encodedSizeWithTag(10, value.lon);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, Way value) throws IOException {
      ProtoAdapter.INT64.encodeWithTag(writer, 1, value.id);
      ProtoAdapter.UINT32.asPacked().encodeWithTag(writer, 2, value.keys);
      ProtoAdapter.UINT32.asPacked().encodeWithTag(writer, 3, value.vals);
      Info.ADAPTER.encodeWithTag(writer, 4, value.info);
      ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 8, value.refs);
      ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 9, value.lat);
      ProtoAdapter.SINT64.asPacked().encodeWithTag(writer, 10, value.lon);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Way decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.keys.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.vals.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.info(Info.ADAPTER.decode(reader)); break;
          case 8: builder.refs.add(ProtoAdapter.SINT64.decode(reader)); break;
          case 9: builder.lat.add(ProtoAdapter.SINT64.decode(reader)); break;
          case 10: builder.lon.add(ProtoAdapter.SINT64.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public Way redact(Way value) {
      Builder builder = value.newBuilder();
      if (builder.info != null) builder.info = Info.ADAPTER.redact(builder.info);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
