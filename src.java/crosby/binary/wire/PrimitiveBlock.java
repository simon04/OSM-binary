// Code generated by Wire protocol buffer compiler, do not edit.
// Source: OSMPBF.PrimitiveBlock in osmformat.proto
package crosby.binary.wire;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * /////////////////////////////////////////////////////////////////////
 * /////////////////////////////////////////////////////////////////////
 */
public final class PrimitiveBlock extends Message<PrimitiveBlock, PrimitiveBlock.Builder> {
  public static final ProtoAdapter<PrimitiveBlock> ADAPTER = new ProtoAdapter_PrimitiveBlock();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_GRANULARITY = 100;

  public static final Long DEFAULT_LAT_OFFSET = 0L;

  public static final Long DEFAULT_LON_OFFSET = 0L;

  public static final Integer DEFAULT_DATE_GRANULARITY = 1000;

  @WireField(
      tag = 1,
      adapter = "crosby.binary.wire.StringTable#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final StringTable stringtable;

  @WireField(
      tag = 2,
      adapter = "crosby.binary.wire.PrimitiveGroup#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PrimitiveGroup> primitivegroup;

  /**
   * Granularity, units of nanodegrees, used to store coordinates in this block.
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer granularity;

  /**
   * Offset value between the output coordinates and the granularity grid in units of nanodegrees.
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long lat_offset;

  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long lon_offset;

  /**
   * Granularity of dates, normally represented in units of milliseconds since the 1970 epoch.
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer date_granularity;

  public PrimitiveBlock(StringTable stringtable, List<PrimitiveGroup> primitivegroup,
      Integer granularity, Long lat_offset, Long lon_offset, Integer date_granularity) {
    this(stringtable, primitivegroup, granularity, lat_offset, lon_offset, date_granularity, ByteString.EMPTY);
  }

  public PrimitiveBlock(StringTable stringtable, List<PrimitiveGroup> primitivegroup,
      Integer granularity, Long lat_offset, Long lon_offset, Integer date_granularity,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.stringtable = stringtable;
    this.primitivegroup = Internal.immutableCopyOf("primitivegroup", primitivegroup);
    this.granularity = granularity;
    this.lat_offset = lat_offset;
    this.lon_offset = lon_offset;
    this.date_granularity = date_granularity;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.stringtable = stringtable;
    builder.primitivegroup = Internal.copyOf(primitivegroup);
    builder.granularity = granularity;
    builder.lat_offset = lat_offset;
    builder.lon_offset = lon_offset;
    builder.date_granularity = date_granularity;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PrimitiveBlock)) return false;
    PrimitiveBlock o = (PrimitiveBlock) other;
    return unknownFields().equals(o.unknownFields())
        && stringtable.equals(o.stringtable)
        && primitivegroup.equals(o.primitivegroup)
        && Internal.equals(granularity, o.granularity)
        && Internal.equals(lat_offset, o.lat_offset)
        && Internal.equals(lon_offset, o.lon_offset)
        && Internal.equals(date_granularity, o.date_granularity);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + stringtable.hashCode();
      result = result * 37 + primitivegroup.hashCode();
      result = result * 37 + (granularity != null ? granularity.hashCode() : 0);
      result = result * 37 + (lat_offset != null ? lat_offset.hashCode() : 0);
      result = result * 37 + (lon_offset != null ? lon_offset.hashCode() : 0);
      result = result * 37 + (date_granularity != null ? date_granularity.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", stringtable=").append(stringtable);
    if (!primitivegroup.isEmpty()) builder.append(", primitivegroup=").append(primitivegroup);
    if (granularity != null) builder.append(", granularity=").append(granularity);
    if (lat_offset != null) builder.append(", lat_offset=").append(lat_offset);
    if (lon_offset != null) builder.append(", lon_offset=").append(lon_offset);
    if (date_granularity != null) builder.append(", date_granularity=").append(date_granularity);
    return builder.replace(0, 2, "PrimitiveBlock{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PrimitiveBlock, Builder> {
    public StringTable stringtable;

    public List<PrimitiveGroup> primitivegroup;

    public Integer granularity;

    public Long lat_offset;

    public Long lon_offset;

    public Integer date_granularity;

    public Builder() {
      primitivegroup = Internal.newMutableList();
    }

    public Builder stringtable(StringTable stringtable) {
      this.stringtable = stringtable;
      return this;
    }

    public Builder primitivegroup(List<PrimitiveGroup> primitivegroup) {
      Internal.checkElementsNotNull(primitivegroup);
      this.primitivegroup = primitivegroup;
      return this;
    }

    /**
     * Granularity, units of nanodegrees, used to store coordinates in this block.
     */
    public Builder granularity(Integer granularity) {
      this.granularity = granularity;
      return this;
    }

    /**
     * Offset value between the output coordinates and the granularity grid in units of nanodegrees.
     */
    public Builder lat_offset(Long lat_offset) {
      this.lat_offset = lat_offset;
      return this;
    }

    public Builder lon_offset(Long lon_offset) {
      this.lon_offset = lon_offset;
      return this;
    }

    /**
     * Granularity of dates, normally represented in units of milliseconds since the 1970 epoch.
     */
    public Builder date_granularity(Integer date_granularity) {
      this.date_granularity = date_granularity;
      return this;
    }

    @Override
    public PrimitiveBlock build() {
      if (stringtable == null) {
        throw Internal.missingRequiredFields(stringtable, "stringtable");
      }
      return new PrimitiveBlock(stringtable, primitivegroup, granularity, lat_offset, lon_offset, date_granularity, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PrimitiveBlock extends ProtoAdapter<PrimitiveBlock> {
    public ProtoAdapter_PrimitiveBlock() {
      super(FieldEncoding.LENGTH_DELIMITED, PrimitiveBlock.class, "type.googleapis.com/OSMPBF.PrimitiveBlock", Syntax.PROTO_2, null);
    }

    @Override
    public int encodedSize(PrimitiveBlock value) {
      int result = 0;
      result += StringTable.ADAPTER.encodedSizeWithTag(1, value.stringtable);
      result += PrimitiveGroup.ADAPTER.asRepeated().encodedSizeWithTag(2, value.primitivegroup);
      result += ProtoAdapter.INT32.encodedSizeWithTag(17, value.granularity);
      result += ProtoAdapter.INT64.encodedSizeWithTag(19, value.lat_offset);
      result += ProtoAdapter.INT64.encodedSizeWithTag(20, value.lon_offset);
      result += ProtoAdapter.INT32.encodedSizeWithTag(18, value.date_granularity);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, PrimitiveBlock value) throws IOException {
      StringTable.ADAPTER.encodeWithTag(writer, 1, value.stringtable);
      PrimitiveGroup.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.primitivegroup);
      ProtoAdapter.INT32.encodeWithTag(writer, 17, value.granularity);
      ProtoAdapter.INT64.encodeWithTag(writer, 19, value.lat_offset);
      ProtoAdapter.INT64.encodeWithTag(writer, 20, value.lon_offset);
      ProtoAdapter.INT32.encodeWithTag(writer, 18, value.date_granularity);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PrimitiveBlock decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.stringtable(StringTable.ADAPTER.decode(reader)); break;
          case 2: builder.primitivegroup.add(PrimitiveGroup.ADAPTER.decode(reader)); break;
          case 17: builder.granularity(ProtoAdapter.INT32.decode(reader)); break;
          case 18: builder.date_granularity(ProtoAdapter.INT32.decode(reader)); break;
          case 19: builder.lat_offset(ProtoAdapter.INT64.decode(reader)); break;
          case 20: builder.lon_offset(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public PrimitiveBlock redact(PrimitiveBlock value) {
      Builder builder = value.newBuilder();
      builder.stringtable = StringTable.ADAPTER.redact(builder.stringtable);
      Internal.redactElements(builder.primitivegroup, PrimitiveGroup.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
